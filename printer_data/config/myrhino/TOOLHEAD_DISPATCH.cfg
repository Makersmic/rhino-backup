#######################################################################
#  RESET STATE
#######################################################################
[gcode_macro RESET_PRINTER_STATE]
description: Reset printer state to standby
gcode:
  M117 Resetting printer state...
  RESPOND TYPE=command MSG="action:notify Resetting printer state"
  CLEAR_PAUSE
  CANCEL_PRINT_BASE
  M117 Printer in standby
  RESPOND TYPE=command MSG="action:notify Printer in standby"


#######################################################################
#  JOB START (ENTRY POINT)
#######################################################################
[gcode_macro START_JOB]
description: Prepare and start a job with toolhead + material
gcode:
  #RESET_PRINTER_STATE
  home
  {% set TOOLHEAD = params.TOOLHEAD|default("BlockOne") %}
  {% set MATERIAL = params.MATERIAL|default("PLA") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}

  M117 Preparing {TOOLHEAD} with {MATERIAL}...
  RESPOND TYPE=command MSG="action:notify Preparing {TOOLHEAD} with {MATERIAL}"

  CONFIRM_TOOLHEAD TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} EXTRUDER={EXTRUDER}


#######################################################################
#  CONFIRM TOOLHEAD (popup with auto-continue)
#######################################################################
[gcode_macro CONFIRM_TOOLHEAD]
description: Show popup confirmation
gcode:
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE %}
  {% set EXTRUDER = params.EXTRUDER %}
  {% set tool_type = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].type %}

  RESPOND TYPE=command MSG="action:prompt_begin Confirm Toolhead and Material"
  RESPOND TYPE=command MSG="action:prompt_text Toolhead: {TOOLHEAD}"
  RESPOND TYPE=command MSG="action:prompt_text Material: {MATERIAL}"
  {% if tool_type == "DEPOSITION" %}
    RESPOND TYPE=command MSG="action:prompt_text Extruder: {EXTRUDER}"
    RESPOND TYPE=command MSG="action:prompt_text Nozzle Size: {NOZZLE_SIZE} mm"
  {% endif %}
  RESPOND TYPE=command MSG="action:prompt_button Proceed|_CONFIRM_TOOLHEAD_RESPONSE RESPONSE=proceed TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} EXTRUDER={EXTRUDER}|success"
  RESPOND TYPE=command MSG="action:prompt_button Cancel|_CONFIRM_TOOLHEAD_RESPONSE RESPONSE=cancel|danger"
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _CONFIRM_TOOLHEAD_RESPONSE]
description: Handle confirmation popup
gcode:
  {% set RESPONSE = params.RESPONSE %}
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE %}
  {% set EXTRUDER = params.EXTRUDER %}
  RESPOND TYPE=command MSG="action:prompt_end"

  {% if RESPONSE == "proceed" %}
    M117 Proceeding with {TOOLHEAD}/{MATERIAL}
    RESPOND TYPE=command MSG="action:notify Proceeding with {TOOLHEAD}/{MATERIAL}"
    LEDFLASH
    SET_TOOLHEAD TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} EXTRUDER={EXTRUDER} SKIP_PROMPT=true
    START_SEQUENCE
  {% else %}
    M117 Job canceled by user
    RESPOND TYPE=command MSG="action:notify Job canceled by user"
    LEDFLASH
    RESET_PRINTER_STATE
  {% endif %}


#######################################################################
#  SEQUENCE WRAPPER (runs PreCheck, then print)
#######################################################################
[gcode_macro START_SEQUENCE]
description: Run safety/prep before file execution
gcode:
  M117 Running PreCheck...
  RESPOND TYPE=command MSG="action:notify Running PreCheck"
  PreCheck
  M117 Job starting...
  RESPOND TYPE=command MSG="action:notify Job starting"
  SDCARD_PRINT_FILE  ; start actual job


#######################################################################
#  TOOLHEAD DISPATCHER
#######################################################################
[gcode_macro SET_TOOLHEAD]
description: Setup toolhead and delegate
gcode:
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE %}
  {% set EXTRUDER = params.EXTRUDER %}
  {% set tool_type = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].type %}

  {% if tool_type == "DEPOSITION" %}
    SET_PRINT TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} EXTRUDER={EXTRUDER}
  {% elif tool_type == "LASER" %}
    SET_LASER TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL}
  {% elif tool_type == "SPINDLE" %}
    SET_SPINDLE TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL}
  {% elif tool_type == "DRAG_KNIFE" %}
    SET_DRAG_KNIFE TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL}
  {% else %}
    RESPOND TYPE=error MSG="Unsupported tool type: {tool_type}"
    { action_raise_error("Unsupported tool type: " ~ tool_type) }
  {% endif %}


#######################################################################
#  DEPOSITION TOOL
#######################################################################
[gcode_macro SET_PRINT]
description: Configure deposition (extruder-based) toolhead with acceleration, square corner velocity, and Z-offset
gcode:
  {% set TOOLHEAD = params.TOOLHEAD|default("BlockOne") %}
  {% set MATERIAL = params.MATERIAL|default("PLA") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}

  # Validate toolhead exists
  {% if TOOLHEAD not in printer["gcode_macro VARIABLES"].toolheads %}
    RESPOND TYPE=error MSG="Toolhead {TOOLHEAD} not defined in VARIABLES"
    { action_raise_error("Toolhead " ~ TOOLHEAD ~ " not defined in VARIABLES") }
  {% endif %}

  {% set toolhead_data = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD] %}
  {% set extruder_count = toolhead_data.extruder_count|default(1)|int %}

  # Construct material key based on extruder count
  {% set NOZZLE_SIZE_STR = "0_4" if NOZZLE_SIZE|float == 0.4 else "0_8" if NOZZLE_SIZE|float == 0.8 else NOZZLE_SIZE|replace(".", "_") %}
  {% set material_key = MATERIAL ~ "_" ~ NOZZLE_SIZE_STR %}
  {% if extruder_count > 1 %}
    {% set material_key = material_key ~ "_T" ~ EXTRUDER %}
  {% endif %}

  # Validate material exists
  {% if 'materials' in toolhead_data and material_key in toolhead_data.materials %}
    {% set mat_settings = toolhead_data.materials[material_key] %}
    # Save material settings to variables.cfg
    SAVE_VARIABLE VARIABLE=set_material_toolhead VALUE="'{TOOLHEAD}'"
    SAVE_VARIABLE VARIABLE=set_material_material VALUE="'{MATERIAL}'"
    SAVE_VARIABLE VARIABLE=set_material_nozzle_size VALUE={NOZZLE_SIZE}
    SAVE_VARIABLE VARIABLE=set_material_extruder_index VALUE={EXTRUDER}
    SAVE_VARIABLE VARIABLE=set_material_bed_temp VALUE={mat_settings.bed_temp|default(60)}
    SAVE_VARIABLE VARIABLE=set_material_extruder_temp VALUE={mat_settings.extruder_temp|default(200)}

    # Set acceleration
    {% set acceleration = mat_settings.acceleration|default(1000)|float %}
    SET_VELOCITY_LIMIT ACCEL={acceleration}
    RESPOND TYPE=command MSG="SET_PRINT: Set acceleration to {acceleration} mm/s^2 for {TOOLHEAD}/{material_key}"

    # Set square corner velocity
    {% set square_corner_velocity = mat_settings.square_corner_velocity|default(5)|float %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={square_corner_velocity}
    RESPOND TYPE=command MSG="SET_PRINT: Set square corner velocity to {square_corner_velocity} mm/s for {TOOLHEAD}/{material_key}"

    # Set Z-offset (prioritize dynamic, then static, then toolheads)
    {% set z_offset_key = 'z_offset_' ~ TOOLHEAD ~ '_' ~ material_key|lower %}
    {% set static_z_offset_key = TOOLHEAD ~ '_' ~ material_key|lower %}
    {% if z_offset_key in printer.save_variables.variables %}
      {% set z_offset = printer.save_variables.variables[z_offset_key]|float %}
      SET_GCODE_OFFSET Z={z_offset}
      RESPOND TYPE=command MSG="SET_PRINT: Applied dynamic Z-offset {z_offset} mm for {TOOLHEAD}/{material_key} from variables.cfg"
    {% elif static_z_offset_key in printer["gcode_macro Z_OFFSET_STORE"] %}
      {% set z_offset = printer["gcode_macro Z_OFFSET_STORE"][static_z_offset_key]|float %}
      SET_GCODE_OFFSET Z={z_offset}
      RESPOND TYPE=command MSG="SET_PRINT: Applied static Z-offset {z_offset} mm for {TOOLHEAD}/{material_key} from Z_OFFSET_STORE"
    {% else %}
      {% set z_offset = mat_settings.z_offset|default(0)|float %}
      SET_GCODE_OFFSET Z={z_offset}
      RESPOND TYPE=command MSG="SET_PRINT: No saved Z-offset for {TOOLHEAD}/{material_key}, using default {z_offset} mm from variables.cfg"
    {% endif %}

    M117 {TOOLHEAD}/{MATERIAL} ready
  {% else %}
    RESPOND TYPE=error MSG="Material {material_key} not defined for toolhead {TOOLHEAD}"
    { action_raise_error("Material " ~ material_key ~ " not defined for toolhead " ~ TOOLHEAD) }
  {% endif %}

  
[gcode_macro SET_PRINT11]
description: Configure deposition (extruder-based) toolhead
gcode:
  {% set TOOLHEAD = params.TOOLHEAD|default("BlockOne") %}
  {% set MATERIAL = params.MATERIAL|default("PLA") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}

  # Validate toolhead exists
  {% if TOOLHEAD not in printer["gcode_macro VARIABLES"].toolheads %}
    RESPOND TYPE=error MSG="Toolhead {TOOLHEAD} not defined in VARIABLES"
    { action_raise_error("Toolhead " ~ TOOLHEAD ~ " not defined in VARIABLES") }
  {% endif %}

  {% set toolhead_data = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD] %}
  {% set extruder_count = toolhead_data.extruder_count|default(1)|int %}

  # Construct material key based on extruder count
  {% set material_key = MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) %}
  {% if extruder_count > 1 %}
    {% set material_key = material_key ~ "_T" ~ EXTRUDER %}
  {% endif %}

  # Validate material exists
  {% if 'materials' in toolhead_data and material_key in toolhead_data.materials %}
    {% set mat_settings = toolhead_data.materials[material_key] %}
    SAVE_VARIABLE VARIABLE=set_material_toolhead VALUE="'{TOOLHEAD}'"
    SAVE_VARIABLE VARIABLE=set_material_material VALUE="'{MATERIAL}'"
    SAVE_VARIABLE VARIABLE=set_material_nozzle_size VALUE={NOZZLE_SIZE}
    SAVE_VARIABLE VARIABLE=set_material_extruder_index VALUE={EXTRUDER}
    SAVE_VARIABLE VARIABLE=set_material_bed_temp VALUE={mat_settings.bed_temp|default(60)}
    SAVE_VARIABLE VARIABLE=set_material_extruder_temp VALUE={mat_settings.extruder_temp|default(200)}
    M117 {TOOLHEAD}/{MATERIAL} ready
  {% else %}
    RESPOND TYPE=error MSG="Material {material_key} not defined for toolhead {TOOLHEAD}"
    { action_raise_error("Material " ~ material_key ~ " not defined for toolhead " ~ TOOLHEAD) }
  {% endif %}


#######################################################################
#  LASER TOOL
#######################################################################
[gcode_macro SET_LASER]
description: Configure laser toolhead
gcode:
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  SAVE_VARIABLE VARIABLE=set_material_toolhead VALUE="{TOOLHEAD}"
  SAVE_VARIABLE VARIABLE=set_material_material VALUE="{MATERIAL}"
  M117 {TOOLHEAD}/{MATERIAL} ready (laser)


#######################################################################
#  SPINDLE TOOL
#######################################################################
[gcode_macro SET_SPINDLE]
description: Configure spindle toolhead
gcode:
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  SAVE_VARIABLE VARIABLE=set_material_toolhead VALUE="{TOOLHEAD}"
  SAVE_VARIABLE VARIABLE=set_material_material VALUE="{MATERIAL}"
  M117 {TOOLHEAD}/{MATERIAL} ready (spindle)


#######################################################################
#  DRAG KNIFE TOOL
#######################################################################
[gcode_macro SET_DRAG_KNIFE]
description: Configure drag-knife toolhead
gcode:
  {% set TOOLHEAD = params.TOOLHEAD %}
  {% set MATERIAL = params.MATERIAL %}
  SAVE_VARIABLE VARIABLE=set_material_toolhead VALUE="{TOOLHEAD}"
  SAVE_VARIABLE VARIABLE=set_material_material VALUE="{MATERIAL}"
  M117 {TOOLHEAD}/{MATERIAL} ready (drag knife)


#######################################################################
#  PRECHECK
#######################################################################
[gcode_macro PreCheck]
description: Safety checks before job
gcode:
  {% set TOOLHEAD = printer.save_variables.variables.set_material_toolhead %}
  {% set MATERIAL = printer.save_variables.variables.set_material_material %}
  {% set NOZZLE_SIZE = printer.save_variables.variables.set_material_nozzle_size|default(0.4)|float %}
  {% set EXTRUDER = printer.save_variables.variables.set_material_extruder_index|default(0)|int %}
  {% set tool_type = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].type %}

  SET_STEPPER_PARAMETERS

  {% if tool_type == "DEPOSITION" %}
    PREHEAT
    PRIME_LINE
  {% elif tool_type == "LASER" %}
    M5
  {% elif tool_type == "SPINDLE" %}
    M5
  {% elif tool_type == "DRAG_KNIFE" %}
    SET_GCODE_OFFSET Z=0
  {% endif %}


[gcode_macro SET_STEPPER_PARAMETERS]
description: Set TMC stepper currents for toolhead, material, and nozzle size
gcode:
  # Check if macro is already running
  {% if printer["gcode_macro SET_STEPPER_PARAMETERS"].is_running|default(false) %}
    RESPOND TYPE=error MSG="SET_STEPPER_PARAMETERS: Already running, aborting"
    { action_raise_error("SET_STEPPER_PARAMETERS: Macro already running") }
  {% endif %}
  # Set running flag
  {% set _ = printer["gcode_macro SET_STEPPER_PARAMETERS"].update({'is_running': true}) %}

  # Retrieve parameters with defaults
  {% set MATERIAL = params.MATERIAL|default(printer.save_variables.variables.set_material_material|default("PLA"))|string %}
  {% set TOOLHEAD = params.TOOLHEAD|default(printer.save_variables.variables.set_material_toolhead|default("BlockOne"))|string %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(printer.save_variables.variables.set_material_nozzle_size|default(0.4))|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}
  {% set call_id = printer.gcode.script_counter|default(0)|int + 1 %}

  # Normalize NOZZLE_SIZE to match variables.cfg format (e.g., 0_4, 0_8)
  {% set NOZZLE_SIZE_STR = "0_4" if NOZZLE_SIZE == 0.4 else "0_8" if NOZZLE_SIZE == 0.8 else NOZZLE_SIZE|string|replace(".", "_") %}

  # Construct material key
  {% set material_key = MATERIAL ~ '_' ~ NOZZLE_SIZE_STR %}
  {% if TOOLHEAD == "SwitchFly" %}
    {% set material_key = material_key ~ '_T' ~ EXTRUDER %}
  {% endif %}

  # Check if toolhead exists
  {% if TOOLHEAD not in printer["gcode_macro VARIABLES"].toolheads %}
    RESPOND TYPE=error MSG="SET_STEPPER_PARAMETERS: Toolhead {TOOLHEAD} not found"
    { action_raise_error("Toolhead {TOOLHEAD} not found") }
  {% endif %}

  # Check if material exists for the toolhead
  {% if material_key not in printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials %}
    RESPOND TYPE=error MSG="SET_STEPPER_PARAMETERS: Material {material_key} not found for {TOOLHEAD}"
    { action_raise_error("Material {material_key} not found for {TOOLHEAD}") }
  {% endif %}

  # Validate nozzle size and extruder for DEPOSITION toolheads
  {% if printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].type == "DEPOSITION" %}
    {% if NOZZLE_SIZE_STR not in ["0_4", "0_8"] %}
      RESPOND TYPE=error MSG="SET_STEPPER_PARAMETERS: Invalid NOZZLE_SIZE {NOZZLE_SIZE_STR} for {TOOLHEAD}, must be 0_4 or 0_8"
      { action_raise_error("Invalid nozzle size {NOZZLE_SIZE_STR}") }
    {% endif %}
    {% if EXTRUDER >= printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].extruder_count %}
      RESPOND TYPE=error MSG="SET_STEPPER_PARAMETERS: Invalid extruder {EXTRUDER} for {TOOLHEAD}"
      { action_raise_error("Invalid extruder {EXTRUDER}") }
    {% endif %}
  {% endif %}

  # Get toolhead type and common parameters
  {% set tool_type = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].type %}
  {% set stepper_x_current = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].stepper_x_current|float %}
  {% set stepper_y_current = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].stepper_y_current|float %}
  {% set stepper_z_current = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].stepper_z_current|float %}

  # Apply TMC currents for all tool types
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={stepper_x_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={stepper_y_current}
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={stepper_z_current}

  # Handle DEPOSITION-specific parameters
  {% if tool_type == "DEPOSITION" %}
    {% set extruder_current = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].extruder_current|float %}
    {% set bed_temp = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].bed_temp|float %}
    {% set extruder_temp = printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials[material_key].extruder_temp|float %}
    SET_TMC_CURRENT STEPPER=extruder CURRENT={extruder_current}
    RESPOND TYPE=command MSG="SET_STEPPER_PARAMETERS: Extruder={extruder_current}"
  {% endif %}

  M117 Stepper currents set for {TOOLHEAD}/{material_key}
  RESPOND TYPE=command MSG="action:notify Stepper currents set for {TOOLHEAD}/{material_key}"


#######################################################################
#  PREHEAT
#######################################################################
[gcode_macro PREHEAT]
description: Preheat with heatsoak at 65°C for 2 minutes if bed temp is below 65°C
gcode:
  {% set bed_temp = printer.save_variables.variables.set_material_bed_temp|default(60)|float %}
  {% set extruder_temp = printer.save_variables.variables.set_material_extruder_temp|default(200)|float %}
  {% set MATERIAL = printer.save_variables.variables.set_material_material|default("PLA") %}
  {% set TOOLHEAD = printer.save_variables.variables.set_material_toolhead|default("BlockOne") %}
  {% set current_bed_temp = printer.heater_bed.temperature|default(20)|float %}

  M117 Preheating...
  RESPOND TYPE=command MSG="action:notify Preheating {TOOLHEAD} for {MATERIAL}"

  # Heat extruder
  M109 S{extruder_temp}

  # Check if heatsoak is needed (current bed temp < 65°C)
  {% if current_bed_temp < 65 %}
    M117 Heatsoak at 65°C for 2 minutes
    RESPOND TYPE=command MSG="action:notify Heatsoak at 65°C for 2 minutes"
    M190 S65  ; Set bed to 65°C and wait
    G4 P120000  ; Wait 2 minutes (120,000 ms)

    M190 S80  ; Set bed to 80°C and wait
    G4 P120000  ; Wait 2 minutes (120,000 ms)    
    
    # Set and wait for final bed temperature
    M117 Heatsoak at {bed_temp} for 1 minute.
    RESPOND TYPE=command MSG="action:notify Heatsoak at {bed_temp} for 1 minute."
    M190 S{bed_temp}
    G4 P60000  ; Wait 1 minutes (60,000 ms)
    M117 Heatsoak complete.  Calibrating Z-tilt...
    RESPOND TYPE=command MSG="action:notify Heatsoak complete.  Calibrating Z-tilt"
    Z_TILT_ADJUST
  {% endif %}

  # Set and wait for final bed temperature
  M190 S{bed_temp}

  M117 {TOOLHEAD} Preheat complete
  RESPOND TYPE=command MSG="action:notify {TOOLHEAD} Preheat complete"

#######################################################################
#  JOB END
#######################################################################
[gcode_macro END_PRINT]
description: End print safely
gcode:
  M104 S0
  M140 S0
  M107
  G91
  G1 Z10 F600
  G90
  G1 X0 Y200 F6000
  M84
  M117 Print finished
  RESPOND TYPE=command MSG="action:notify Print finished"
  RESET_PRINTER_STATE