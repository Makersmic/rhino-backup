[gcode_macro home]
description: checks if x, y, & z axis have been homed.  If not, then homes all axis.
gcode:  
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=3
  {% set ns = namespace(MUSTHOME= false) %}
    {% for AXIS in ["x", "y", "z"] %}
        {% if AXIS in printer.toolhead.homed_axes %}
            M117 {AXIS} IS ALREADY HOMED
        {% else %}
            M117 {AXIS} NOT HOMED
            {% set ns.MUSTHOME = true %}
        {% endif %}
    {% endfor %}   
    {% if ns.MUSTHOME == true %}
        G28
        M117 HOMING
    {% endif %}

[gcode_macro TURN_ON_MOTORS]
description: Initialize the stepper motors.
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
  #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1

#######################
###### Servo Macros####
#######################
# Servo Macros
[gcode_macro ACTIVATE_SERVO]
description: Set the position of the servo shaft to mid-point(90 degrees) and set pwm cycle time for servo.
gcode:
  SET_PIN PIN=SERVO_LASER VALUE=0.075 PWM_CYCLE_TIME=0.02  #VALUE=0.075(90 degrees)
  LEDFLASH

[gcode_macro DEACTIVATE_SERVO]
description: Set the position of the servo shaft to mid-point(90 degrees) and set pwm cycle time for servo.
#use this to ensure servo shaft is centered at the end of using tool head
gcode:
  SET_PIN PIN=SERVO_LASER VALUE=0.075 PWM_CYCLE_TIME=0.02  #VALUE=0.075(90 degrees)
  LEDFLASH

[gcode_macro SET_SERVO_ANGLE]
#set the servo angle or the laser intensity depending on how it is specified in the gcode
description: Set the angle of the servo.
variable_min_pulse: 0.0005
variable_max_pulse: 0.0025
gcode:
  {% if params.ANGLE is defined %}
    {% set angle = params.ANGLE|float %}
    {% if angle >= 0 and angle <= 180 %}
      {% set pulse = min_pulse + (max_pulse - min_pulse) * (angle / 180.0) %}
      {% set duty = pulse / 0.02 %}
      SET_PIN PIN=SERVO_LASER VALUE={duty} PWM_CYCLE_TIME=0.02
      LEDFLASH
    {% else %}
      M117 Error: ANGLE must be 0-180
    {% endif %}
  {% else %}
    M117 Error: ANGLE parameter missing
  {% endif %}

[gcode_macro TEST_SERVO]
description: Rotate servo shaft to 0, 90, 180, 90 degrees.
gcode:
  ACTIVATE_SERVO
  SET_SERVO_ANGLE ANGLE=0
  G4 P1000
  SET_SERVO_ANGLE ANGLE=90
  G4 P1000
  SET_SERVO_ANGLE ANGLE=180
  G4 P1000
  SET_SERVO_ANGLE ANGLE=90
  LEDFLASH

[gcode_macro EMERGENCY_STOP]
description: Kill power to spindle, set spindle speed to 0, set servo shaft 90 degrees.
gcode:
  SET_PIN PIN=Spindle_power VALUE=0
  SET_PIN PIN=SPINDLE_SPEED VALUE=0.3
  SET_PIN PIN=SERVO_LASER VALUE=0.075
  LEDFLASH

###########################
#####  SAVE Z OFFSET  #####
###########################
[gcode_macro SAVE_Z_OFFSET]
description: Save the current Z-offset for the material, nozzle, and extruder
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(printer.save_variables.variables.set_material_extruder_index|default(0))|int %}
    {% set MATERIAL = printer.save_variables.variables.set_material_material|default("PLA") %}
    {% set NOZZLE_SIZE = printer.save_variables.variables.set_material_nozzle_size|float|default(0.4) %}
    {% set nozzle_key = (MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) ~ "_t" ~ EXTRUDER)|lower %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}

    # Validate print state
    {% if printer.print_stats.state != "printing" and printer.print_stats.state != "paused" %}
        {action_raise_error("Cannot save Z-offset: No active print")}
    {% endif %}

    # Save Z-offset
    SAVE_VARIABLE VARIABLE=last_z_offset_{nozzle_key} VALUE={current_z_offset}
    M117 Z-offset {current_z_offset} mm saved for {nozzle_key}
    RESPOND TYPE=command MSG="action:notify Z-offset {current_z_offset} mm saved for {nozzle_key}"

[gcode_macro SAVE_Z_OFFSET_TEST]
description: Test version of SAVE_Z_OFFSET without print state check
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(printer.save_variables.variables.set_material_extruder_index|default(0))|int %}
    {% set MATERIAL = printer.save_variables.variables.set_material_material|default("PLA") %}
    {% set NOZZLE_SIZE = printer.save_variables.variables.set_material_nozzle_size|float|default(0.4) %}
    {% set nozzle_key = (MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) ~ "_t" ~ EXTRUDER)|lower %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}

    # Save Z-offset
    SAVE_VARIABLE VARIABLE=last_z_offset_{nozzle_key} VALUE={current_z_offset}
    M117 Z-offset {current_z_offset} mm saved for {nozzle_key}
    RESPOND TYPE=command MSG="action:notify Z-offset {current_z_offset} mm saved for {nozzle_key}"


[gcode_macro APPLY_SAVED_Z_OFFSET]
description: Apply the saved Z-offset for the current material, nozzle, and extruder
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(printer.save_variables.variables.set_material_extruder_index|default(0))|int %}
    {% set MATERIAL = printer.save_variables.variables.set_material_material|default("PLA") %}
    {% set NOZZLE_SIZE = printer.save_variables.variables.set_material_nozzle_size|float|default(0.4) %}
    {% set nozzle_key = (MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) ~ "_t" ~ EXTRUDER)|lower %}
    {% set default_z_offset = printer["gcode_macro VARIABLES"].toolheads[printer.save_variables.variables.set_material_toolhead].materials[(MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")))].z_offset|default(0.0)|float %}
    {% set saved_z_offset = printer.save_variables.variables["last_z_offset_" + nozzle_key]|default(default_z_offset)|float %}

    # Validate homing
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_raise_error("Cannot apply Z-offset: Printer not homed")}
    {% endif %}

    # Apply Z-offset
    SET_GCODE_OFFSET Z={saved_z_offset} MOVE=0
    M117 Applied saved Z-offset {saved_z_offset} mm for {nozzle_key}
    RESPOND TYPE=command MSG="action:notify Applied Z-offset {saved_z_offset} mm for {nozzle_key}"


[gcode_macro UPDATE_MATERIAL_Z_OFFSET]
description: Update the Z-offset in variables.cfg for the specified toolhead, material, nozzle size, and extruder
gcode:
    {% set TOOLHEAD = params.TOOLHEAD|default(printer.save_variables.variables.set_material_toolhead|default("BlockOne"))|string %}
    {% set MATERIAL = params.MATERIAL|default(printer.save_variables.variables.set_material_material|default("PLA"))|string %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(printer.save_variables.variables.set_material_nozzle_size|default(0.4))|string %}
    {% set EXTRUDER = params.EXTRUDER|default(printer.save_variables.variables.set_material_extruder_index|default(0))|int %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}

    # Normalize NOZZLE_SIZE to match variables.cfg format (e.g., 0_4, 0_8)
    {% set NOZZLE_SIZE_STR = "0_4" if NOZZLE_SIZE|float == 0.4 else "0_8" if NOZZLE_SIZE|float == 0.8 else NOZZLE_SIZE|replace(".", "_") %}
    {% if NOZZLE_SIZE_STR not in ["0_4", "0_8"] %}
        {action_raise_error("UPDATE_MATERIAL_Z_OFFSET: Invalid NOZZLE_SIZE {NOZZLE_SIZE}, must be 0.4 or 0.8")}
    {% endif %}

    # Construct material key to match variables.cfg (keep uppercase for MATERIAL)
    {% set material_key = MATERIAL ~ '_' ~ NOZZLE_SIZE_STR %}
    {% if TOOLHEAD == "SwitchFly" %}
        {% set material_key = material_key ~ '_T' ~ EXTRUDER %}
    {% endif %}

    # Validate toolhead
    {% if TOOLHEAD not in printer["gcode_macro VARIABLES"].toolheads %}
        {action_raise_error("UPDATE_MATERIAL_Z_OFFSET: Toolhead {TOOLHEAD} not found")}
    {% endif %}

    # Validate material
    {% if material_key not in printer["gcode_macro VARIABLES"].toolheads[TOOLHEAD].materials %}
        {action_raise_error("UPDATE_MATERIAL_Z_OFFSET: Material {material_key} not found for {TOOLHEAD}")}
    {% endif %}

    # Validate print state (optional, allows manual calls)
    {% if printer.print_stats.state not in ["printing", "paused", "standby"] %}
        RESPOND TYPE=warning MSG="UPDATE_MATERIAL_Z_OFFSET: No active print, updating Z-offset anyway"
    {% endif %}

    # Update z_offset in the toolheads structure
    {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
    {% set _ = toolheads[TOOLHEAD].materials[material_key].update({'z_offset': current_z_offset}) %}

    # Save updated toolheads structure to variables.cfg
    SAVE_VARIABLE VARIABLE=toolheads VALUE="{toolheads|tojson}"

    M117 Z-offset {current_z_offset} mm updated for {TOOLHEAD}/{material_key}
    RESPOND TYPE=command MSG="action:notify Z-offset {current_z_offset} mm updated for {TOOLHEAD}/{material_key}"