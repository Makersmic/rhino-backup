###########################################
######--- -- - 3d Printing - -- -- ########
###########################################

#This macro accomodates too libraries that include Switchfly and Jack Rabbit.
[gcode_macro SWITCH_T0]
description: Switch to filament 1 (T0) on SwitchFly
gcode:
    {% set MATERIAL = params.MATERIAL|default("PLA_0_4")|string %}
    {% set toolhead = "SwitchFly" %}

    # Debug: Log entry
    RESPOND MSG="Debug: SWITCH_T0 called with MATERIAL={MATERIAL}"

    # Access toolheads
    {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
    {% if toolhead not in toolheads %}
        RESPOND MSG="Error: Toolhead {toolhead} not found in toolheads"
        { action_raise_error("Invalid toolhead: " ~ toolhead) }
    {% endif %}
    {% set vars = toolheads[toolhead].materials.get(MATERIAL, {}) %}
    {% if vars == {} %}
        {% set MATERIAL = "PLA_0_4" %}
        {% set vars = toolheads[toolhead].materials["PLA_0_4"] %}
        RESPOND MSG="Debug: Invalid MATERIAL, defaulting to PLA_0_4"
    {% endif %}

    RESPOND MSG="Debug: SWITCH_T0 vars: extruder_temp={vars.extruder_temp}, purge_length={vars.purge_length}"

    M117 Switching to Tool 0

    # Set extruder state
    T0

    # Save state
    SAVE_GCODE_STATE NAME=tool_change_state

    # Lift Z
    G91
    G1 Z5 F5000
    G90

    # Retract
    G91
    G1 E-{vars.retraction_length} F{vars.retraction_speed}

    # Set servo to 0° for T0
    SET_SERVO_ANGLE ANGLE=0
    G4 P1000

    # Set temperatures
    {% if printer.extruder.temperature < (vars.extruder_temp * 0.9) %}
        M104 S{vars.extruder_temp}
        M109 S{vars.extruder_temp}
    {% endif %}
    {% if printer.heater_bed.temperature < (vars.bed_temp * 0.9) %}
        M140 S{vars.bed_temp}
        M190 S{vars.bed_temp}
    {% endif %}

    # Load filament
    G91
    G1 E{vars.load_length} F{vars.load_speed}
    G4 P{vars.load_wait}
    G90

    # Purge at safe position
    G1 X50 Y50 Z5 F9000
    PURGE MATERIAL="{MATERIAL}"

    # Restore state
    RESTORE_GCODE_STATE NAME=tool_change_state MOVE=1 MOVE_SPEED=100
  
[gcode_macro SWITCH_T1]
description: Switch to filament 2 (T1) on SwitchFly
gcode:
    {% set MATERIAL = params.MATERIAL|default("PLA_0_4")|string %}
    {% set toolhead = "SwitchFly" %}

    # Debug: Log entry
    RESPOND MSG="Debug: SWITCH_T1 called with MATERIAL={MATERIAL}"

    # Access toolheads
    {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
    {% if toolhead not in toolheads %}
        RESPOND MSG="Error: Toolhead {toolhead} not found in toolheads"
        { action_raise_error("Invalid toolhead: " ~ toolhead) }
    {% endif %}
    {% set vars = toolheads[toolhead].materials.get(MATERIAL, {}) %}
    {% if vars == {} %}
        {% set MATERIAL = "PLA_0_4" %}
        {% set vars = toolheads[toolhead].materials["PLA_0_4"] %}
        RESPOND MSG="Debug: Invalid MATERIAL, defaulting to PLA_0_4"
    {% endif %}

    RESPOND MSG="Debug: SWITCH_T1 vars: extruder_temp={vars.extruder_temp}, purge_length={vars.purge_length}"

    M117 Switching to Tool 1

    # Set extruder state
    T1

    # Save state
    SAVE_GCODE_STATE NAME=tool_change_state

    # Lift Z
    G91
    G1 Z5 F5000
    G90

    # Retract
    G91
    G1 E-{vars.retraction_length} F{vars.retraction_speed}

    # Set servo to 180° for T1
    SET_SERVO_ANGLE ANGLE=180
    G4 P1000

    # Set temperatures
    {% if printer.extruder.temperature < (vars.extruder_temp * 0.9) %}
        M104 S{vars.extruder_temp}
        M109 S{vars.extruder_temp}
    {% endif %}
    {% if printer.heater_bed.temperature < (vars.bed_temp * 0.9) %}
        M140 S{vars.bed_temp}
        M190 S{vars.bed_temp}
    {% endif %}

    # Load filament
    G91
    G1 E{vars.load_length} F{vars.load_speed}
    G4 P{vars.load_wait}
    G90

    # Purge at safe position
    G1 X50 Y50 Z5 F9000
    PURGE MATERIAL="{MATERIAL}"

    # Restore state
    RESTORE_GCODE_STATE NAME=tool_change_state MOVE=1 MOVE_SPEED=100




##########################################################################
## Redefine of G-code command G1 and G0 for E-reverse rotation ###########
#####by DrumClock#########################################################
[gcode_macro G1]
description: Change extruder rotation for SwitchFly T1
rename_existing: G1.1
gcode:
    {% set param_all = namespace(output = '') %}
    {% set TOOLHEAD = printer.save_variables.variables.set_material_toolhead|default("BlockOne") %}
    {% if 'X' in params %}
        {% set param = "X%s " % params.X %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'Y' in params %}
        {% set param = "Y%s " % params.Y %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'Z' in params %}
        {% set param = "Z%s " % params.Z %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'E' in params %}
        {% if TOOLHEAD == "SwitchFly" and printer.extruder == 1 %}
            {% set param = "E%s " % (params.E|float * -1.0) %}
        {% else %}
            {% set param = "E%s " % params.E %}
        {% endif %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'F' in params %}
        {% set param = "F%s" % params.F %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    G1.1 {param_all.output}

####


[gcode_macro G0]
description: Change extruder rotation for SwitchFly T1
rename_existing: G0.1
gcode:
    {% set param_all = namespace(output = '') %}
    {% set TOOLHEAD = printer.save_variables.variables.set_material_toolhead|default("BlockOne") %}
    {% if 'X' in params %}
        {% set param = "X%s " % params.X %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'Y' in params %}
        {% set param = "Y%s " % params.Y %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'Z' in params %}
        {% set param = "Z%s " % params.Z %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'E' in params %}
        {% if TOOLHEAD == "SwitchFly" and printer.extruder == 1 %}
            {% set param = "E%s " % (params.E|float * -1.0) %}
        {% else %}
            {% set param = "E%s " % params.E %}
        {% endif %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    {% if 'F' in params %}
        {% set param = "F%s" % params.F %}
        {% set param_all.output = param_all.output + param %}
    {% endif %}
    G0.1 {param_all.output}

[gcode_macro CALCULATE_PA]
description: Auto-calculates the pressure advance for each material.
# BOWDEN_LENGTH in centimeters
# LAYER_HEIGHT and NOZZLE_SIZE in millimeters
# PRINT_SPEED in millimeters per second
gcode:
    {% set material = params.MATERIAL|default("PLA") %}
    {% set bowden_length_cm = params.BOWDEN_LENGTH|default(0.4)|float %} #use 75% of the retraction length for direct drive
    {% set bowden_length_dm = bowden_length_cm / 10 %}  # Convert cm to decimeters for consistency
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set line_width = params.LINE_WIDTH|default(nozzle_size * 1.2)|float %}
    {% set print_speed = params.PRINT_SPEED|default(60)|float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}
    {% set filament_area = 3.14159 * (filament_diameter / 2) ** 2 %}
    {% set flow_rate = line_width * layer_height * print_speed %}
    {% set material_constant = {
        'PLA': 85,
        'PETG': 100,
        'ABS': 95,
        'TPU': 140,
        'NYLON': 120,
        'ASA': 100,
        'PVB': 85,
        'PA': 120,
        'FLEX': 140
    }[material] %}
    {% set pressure_advance = (flow_rate * bowden_length_dm) / (material_constant * filament_area) %}
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}





[gcode_macro PURGE]
description: Purge filament for specified toolhead and material
gcode:
  {% set TOOLHEAD = params.TOOLHEAD|default("BlockOne") %}
  {% set MATERIAL = params.MATERIAL|default("PLA") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}
  _GENERATE_NOZZLE_KEY TOOLHEAD={TOOLHEAD} MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} EXTRUDER={EXTRUDER}
  {% set nozzle_key = printer.save_variables.variables.nozzle_key %}
  {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
  {% if not toolheads %}
    RESPOND TYPE=error MSG="Toolheads configuration not found"
    { action_raise_error("Missing toolheads configuration") }
  {% endif %}
  {% if TOOLHEAD not in toolheads %}
    RESPOND TYPE=error MSG="Toolhead {TOOLHEAD} not found"
    { action_raise_error("Invalid toolhead: " ~ TOOLHEAD) }
  {% endif %}
  {% set vars = toolheads[TOOLHEAD].materials.get(nozzle_key, {}) %}
  {% if vars == {} %}
    RESPOND TYPE=error MSG="Material {nozzle_key} not found for {TOOLHEAD}"
    { action_raise_error("Material " ~ nozzle_key ~ " not found for " ~ TOOLHEAD) }
  {% endif %}
  {% set purge_length = vars.get("purge_length", 10.0)|float %}
  {% set purge_wait = vars.get("purge_wait", 2000)|int %}
  {% set extruder_temp = vars.get("extruder_temp", 200)|float %}
  {% set min_extrude_temp = printer["extruder" ~ ("" if EXTRUDER == 0 else EXTRUDER)].min_extrude_temp|default(170)|float %}

  RESPOND MSG="Debug: PURGE called with nozzle_key={nozzle_key}, purge_length={purge_length}, purge_wait={purge_wait}"

  # Ensure extruder temperature
  {% if printer["extruder" ~ ("" if EXTRUDER == 0 else EXTRUDER)].temperature < min_extrude_temp %}
    M117 Heating extruder for purge...
    RESPOND TYPE=command MSG="action:notify Heating extruder for purge"
    M109 S{extruder_temp}
  {% endif %}

  # Ensure axes are homed
  {% if "x" not in printer.homed_axes or "y" not in printer.homed_axes or "z" not in printer.homed_axes %}
    G28
  {% endif %}

  # Validate purge coordinates
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set purge_x = vars.get("purge_x", max_x - 10)|float %}
  {% set purge_y = vars.get("purge_y", max_y - 10)|float %}
  {% if purge_x > max_x or purge_y > max_y %}
    RESPOND TYPE=error MSG="Purge coordinates ({purge_x}, {purge_y}) exceed build volume"
    { action_raise_error("Invalid purge coordinates") }
  {% endif %}

  # Move to purge location
  G90
  G1 X{purge_x} Y{purge_y} Z5 F9000

  # Purge
  G91
  G1 E{purge_length} F300
  G4 P{purge_wait}
  G90

  M117 Purge complete for {nozzle_key}
  RESPOND TYPE=command MSG="action:notify Purge complete for {nozzle_key}"

