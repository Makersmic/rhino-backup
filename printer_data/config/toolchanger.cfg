[toolchanger]
[gcode_macro ADD_NEW_TOOL_RESPONSE]
description: Handles responses for adding a new toolhead
gcode:
  {% set STEP = params.STEP|default(1)|int %}
  {% set TOOLHEAD_NAME = params.TOOLHEAD_NAME|default("") %}
  {% set TOOL_ID = params.TOOL_ID|default("") %}
  {% set TOOLHEAD_TYPE = params.TOOLHEAD_TYPE|default("") %}
  {% set EXTRUDER_COUNT = params.EXTRUDER_COUNT|default("") %}
  {% set MATERIAL = params.MATERIAL|default("") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default("") %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default("") %}
  {% set BED_TEMP = params.BED_TEMP|default("") %}
  {% set LASER_POWER = params.LASER_POWER|default("") %}
  {% set SPINDLE_SPEED = params.SPINDLE_SPEED|default("") %}
  {% set PRESSURE = params.PRESSURE|default("") %}
  {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
  {% set tool_mapping = printer["gcode_macro VARIABLES"].tool_mapping %}
  {% set led_pin = printer.save_variables.variables.get("led_pin", "Umbilical_LED") %}
  
  {% if STEP == 1 %}
    {% if TOOLHEAD_NAME == "" or TOOLHEAD_NAME in toolheads %}
      RESPOND TYPE=error MSG="Invalid or duplicate toolhead name: {TOOLHEAD_NAME}"
      { action_raise_error("Toolhead name must be unique and non-empty") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Toolhead ID"
    RESPOND TYPE=command MSG="action:prompt_input TOOL_ID=Enter tool ID (integer, e.g., 6):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=2 TOOLHEAD_NAME='{TOOLHEAD_NAME}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 2 %}
    {% if TOOL_ID == "" or TOOL_ID in tool_mapping %}
      RESPOND TYPE=error MSG="Invalid or duplicate tool ID: {TOOL_ID}"
      { action_raise_error("Tool ID must be unique and non-empty") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Toolhead Type"
    RESPOND TYPE=command MSG="action:prompt_input TOOLHEAD_TYPE=Enter toolhead type (DEPOSITION, LASER, SPINDLE, DRAG_KNIFE):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=3 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 3 %}
    {% if TOOLHEAD_TYPE not in ["DEPOSITION", "LASER", "SPINDLE", "DRAG_KNIFE"] %}
      RESPOND TYPE=error MSG="Invalid toolhead type: {TOOLHEAD_TYPE}"
      { action_raise_error("Toolhead type must be DEPOSITION, LASER, SPINDLE, or DRAG_KNIFE") }
    {% endif %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      RESPOND TYPE=command MSG="action:prompt_begin Extruder Count"
      RESPOND TYPE=command MSG="action:prompt_input EXTRUDER_COUNT=Enter number of extruders (1 or 2):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=4 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}'"
      RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_begin Material"
      RESPOND TYPE=command MSG="action:prompt_input MATERIAL=Enter material (e.g., PLA, PLYWOOD):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=5 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT=0"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
  {% elif STEP == 4 %}
    {% if EXTRUDER_COUNT not in ["1", "2"] %}
      RESPOND TYPE=error MSG="Invalid extruder count: {EXTRUDER_COUNT}"
      { action_raise_error("Extruder count must be 1 or 2") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Material"
    RESPOND TYPE=command MSG="action:prompt_input MATERIAL=Enter material (e.g., PLA, ABS):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=5 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 5 %}
    {% if MATERIAL == "" %}
      RESPOND TYPE=error MSG="Material required"
      { action_raise_error("Material cannot be empty") }
    {% endif %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      RESPOND TYPE=command MSG="action:prompt_begin Nozzle Size"
      RESPOND TYPE=command MSG="action:prompt_input NOZZLE_SIZE=Enter nozzle size (e.g., 0.4):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=6 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}' MATERIAL='{MATERIAL}'"
      RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_begin Settings"
      {% if TOOLHEAD_TYPE == "LASER" %}
        RESPOND TYPE=command MSG="action:prompt_input LASER_POWER=Enter laser power (0.0-1.0, e.g., 0.8):"
      {% elif TOOLHEAD_TYPE == "SPINDLE" %}
        RESPOND TYPE=command MSG="action:prompt_input SPINDLE_SPEED=Enter spindle speed (RPM, e.g., 12000):"
      {% elif TOOLHEAD_TYPE == "DRAG_KNIFE" %}
        RESPOND TYPE=command MSG="action:prompt_input PRESSURE=Enter pressure (grams, e.g., 150):"
      {% endif %}
      RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=7 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT=0 MATERIAL='{MATERIAL}' NOZZLE_SIZE=0.0"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
  {% elif STEP == 6 %}
    {% if NOZZLE_SIZE|float <= 0 %}
      RESPOND TYPE=error MSG="Invalid nozzle size: {NOZZLE_SIZE}"
      { action_raise_error("Nozzle size must be positive") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Deposition Settings"
    RESPOND TYPE=command MSG="action:prompt_input EXTRUDER_TEMP=Enter extruder temperature (e.g., 200):"
    RESPOND TYPE=command MSG="action:prompt_input BED_TEMP=Enter bed temperature (e.g., 60):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|ADD_NEW_TOOL_RESPONSE STEP=7 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOL_ID='{TOOL_ID}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}' MATERIAL='{MATERIAL}' NOZZLE_SIZE='{NOZZLE_SIZE}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 7 %}
    {% set nozzle_key = MATERIAL if TOOLHEAD_TYPE in ["LASER", "SPINDLE", "DRAG_KNIFE"] else (MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) ~ (("_T0") if EXTRUDER_COUNT|int == 2 else "")) %}
    {% set materials = {} %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      {% set base_settings = {
        "extruder_temp": EXTRUDER_TEMP|int|default(200),
        "bed_temp": BED_TEMP|int|default(60),
        "z_offset": 0.1 if NOZZLE_SIZE|float <= 0.4 else 0.2,
        "accel": 2000.0,
        "extruder_count": EXTRUDER_COUNT|int,
        "nozzle_size": NOZZLE_SIZE|float,
        "square_corner_velocity": 5.0,
        "fan_speed": 0.5,
        "load_length": 10.0,
        "load_speed": 50,
        "load_wait": 1000,
        "purge_length": 12.0,
        "purge_wait": 2000,
        "stepper_x_current": 0.8,
        "stepper_y_current": 0.8,
        "stepper_z_current": 1.0,
        "extruder_current": 0.6
      } %}
      {% if EXTRUDER_COUNT|int == 2 %}
        {% set materials = {
          (nozzle_key): base_settings,
          (nozzle_key ~ "_T1"): base_settings
        } %}
      {% else %}
        {% set materials = {(nozzle_key): base_settings} %}
      {% endif %}
    {% elif TOOLHEAD_TYPE == "LASER" %}
      {% set materials = {nozzle_key: {
        "laser_power": LASER_POWER|float|default(0.8),
        "bed_temp": 0,
        "z_offset": 0.5,
        "accel": 1000.0,
        "square_corner_velocity": 5.0,
        "feed_rate": 600,
        "stepper_x_current": 0.7,
        "stepper_y_current": 0.7,
        "stepper_z_current": 0.8
      }} %}
    {% elif TOOLHEAD_TYPE == "SPINDLE" %}
      {% set materials = {nozzle_key: {
        "spindle_speed": SPINDLE_SPEED|int|default(12000),
        "bed_temp": 0,
        "z_offset": 0.3,
        "accel": 800.0,
        "square_corner_velocity": 5.0,
        "feed_rate": 1000,
        "stepper_x_current": 1.2,
        "stepper_y_current": 1.2,
        "stepper_z_current": 1.2
      }} %}
    {% elif TOOLHEAD_TYPE == "DRAG_KNIFE" %}
      {% set materials = {nozzle_key: {
        "pressure": PRESSURE|int|default(150),
        "bed_temp": 0,
        "z_offset": 0.1,
        "accel": 1200.0,
        "square_corner_velocity": 5.0,
        "feed_rate": 1000,
        "stepper_x_current": 0.6,
        "stepper_y_current": 0.6,
        "stepper_z_current": 0.8
      }} %}
    {% endif %}
    {% set toolhead_data = {"type": TOOLHEAD_TYPE, "extruder_count": EXTRUDER_COUNT|int|default(0), "materials": materials}|tojson %}
    RUN_SHELL_COMMAND CMD=update_toolheads PARAMS="/home/pi/printer_data/config/variables.cfg add '{TOOLHEAD_NAME}' '{toolhead_data}' {TOOL_ID}"
    M117 Toolhead {TOOLHEAD_NAME} added
    RESPOND TYPE=command MSG="action:notify Toolhead {TOOLHEAD_NAME} added"
    {% if led_pin in printer %}
      LEDFLASH LED_PIN={led_pin}
    {% endif %}
    RESTART
  {% endif %}

[gcode_macro EDIT_TOOL_RESPONSE]
description: Handles responses for editing a toolhead
gcode:
  {% set STEP = params.STEP|default(1)|int %}
  {% set TOOLHEAD_NAME = params.TOOLHEAD_NAME|default("") %}
  {% set TOOLHEAD_TYPE = params.TOOLHEAD_TYPE|default("") %}
  {% set EXTRUDER_COUNT = params.EXTRUDER_COUNT|default("") %}
  {% set MATERIAL = params.MATERIAL|default("") %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default("") %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default("") %}
  {% set BED_TEMP = params.BED_TEMP|default("") %}
  {% set LASER_POWER = params.LASER_POWER|default("") %}
  {% set SPINDLE_SPEED = params.SPINDLE_SPEED|default("") %}
  {% set PRESSURE = params.PRESSURE|default("") %}
  {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
  {% set led_pin = printer.save_variables.variables.get("led_pin", "Umbilical_LED") %}
  
  {% if STEP == 1 %}
    {% if TOOLHEAD_NAME == "" or TOOLHEAD_NAME not in toolheads %}
      RESPOND TYPE=error MSG="Invalid or missing toolhead: {TOOLHEAD_NAME}"
      { action_raise_error("Toolhead not found") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Toolhead Type"
    RESPOND TYPE=command MSG="action:prompt_input TOOLHEAD_TYPE=Enter new toolhead type (DEPOSITION, LASER, SPINDLE, DRAG_KNIFE, or press enter to keep {toolheads[TOOLHEAD_NAME].type}):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=2 TOOLHEAD_NAME='{TOOLHEAD_NAME}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 2 %}
    {% set TOOLHEAD_TYPE = TOOLHEAD_TYPE if TOOLHEAD_TYPE != "" else toolheads[TOOLHEAD_NAME].type %}
    {% if TOOLHEAD_TYPE not in ["DEPOSITION", "LASER", "SPINDLE", "DRAG_KNIFE"] %}
      RESPOND TYPE=error MSG="Invalid toolhead type: {TOOLHEAD_TYPE}"
      { action_raise_error("Toolhead type must be DEPOSITION, LASER, SPINDLE, or DRAG_KNIFE") }
    {% endif %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      RESPOND TYPE=command MSG="action:prompt_begin Extruder Count"
      RESPOND TYPE=command MSG="action:prompt_input EXTRUDER_COUNT=Enter number of extruders (1 or 2, or press enter to keep {toolheads[TOOLHEAD_NAME].extruder_count}):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=3 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}'"
      RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_begin Material"
      RESPOND TYPE=command MSG="action:prompt_input MATERIAL=Enter material (e.g., PLA, PLYWOOD, or press enter to keep existing):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=4 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT=0"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
  {% elif STEP == 3 %}
    {% set EXTRUDER_COUNT = EXTRUDER_COUNT if EXTRUDER_COUNT != "" else toolheads[TOOLHEAD_NAME].extruder_count %}
    {% if EXTRUDER_COUNT not in ["1", "2"] %}
      RESPOND TYPE=error MSG="Invalid extruder count: {EXTRUDER_COUNT}"
      { action_raise_error("Extruder count must be 1 or 2") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Material"
    RESPOND TYPE=command MSG="action:prompt_input MATERIAL=Enter material (e.g., PLA, ABS, or press enter to keep existing):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=4 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 4 %}
    {% set MATERIAL = MATERIAL if MATERIAL != "" else toolheads[TOOLHEAD_NAME].materials.keys()|first %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      RESPOND TYPE=command MSG="action:prompt_begin Nozzle Size"
      RESPOND TYPE=command MSG="action:prompt_input NOZZLE_SIZE=Enter nozzle size (e.g., 0.4, or press enter to keep existing):"
      RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=5 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}' MATERIAL='{MATERIAL}'"
      RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_begin Settings"
      {% if TOOLHEAD_TYPE == "LASER" %}
        RESPOND TYPE=command MSG="action:prompt_input LASER_POWER=Enter laser power (0.0-1.0, or press enter to keep {toolheads[TOOLHEAD_NAME].materials[MATERIAL].laser_power}):"
      {% elif TOOLHEAD_TYPE == "SPINDLE" %}
        RESPOND TYPE=command MSG="action:prompt_input SPINDLE_SPEED=Enter spindle speed (RPM, or press enter to keep {toolheads[TOOLHEAD_NAME].materials[MATERIAL].spindle_speed}):"
      {% elif TOOLHEAD_TYPE == "DRAG_KNIFE" %}
        RESPOND TYPE=command MSG="action:prompt_input PRESSURE=Enter pressure (grams, or press enter to keep {toolheads[TOOLHEAD_NAME].materials[MATERIAL].pressure}):"
      {% endif %}
      RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=6 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT=0 MATERIAL='{MATERIAL}' NOZZLE_SIZE=0.0"
      RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
  {% elif STEP == 5 %}
    {% set NOZZLE_SIZE = NOZZLE_SIZE if NOZZLE_SIZE != "" else (toolheads[TOOLHEAD_NAME].materials[MATERIAL].nozzle_size|default(0.4)) %}
    {% if NOZZLE_SIZE|float <= 0 %}
      RESPOND TYPE=error MSG="Invalid nozzle size: {NOZZLE_SIZE}"
      { action_raise_error("Nozzle size must be positive") }
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_begin Deposition Settings"
    RESPOND TYPE=command MSG="action:prompt_input EXTRUDER_TEMP=Enter extruder temperature (e.g., 200, or press enter to keep {toolheads[TOOLHEAD_NAME].materials[MATERIAL].extruder_temp}):"
    RESPOND TYPE=command MSG="action:prompt_input BED_TEMP=Enter bed temperature (e.g., 60, or press enter to keep {toolheads[TOOLHEAD_NAME].materials[MATERIAL].bed_temp}):"
    RESPOND TYPE=command MSG="action:prompt_button Continue|EDIT_TOOL_RESPONSE STEP=6 TOOLHEAD_NAME='{TOOLHEAD_NAME}' TOOLHEAD_TYPE='{TOOLHEAD_TYPE}' EXTRUDER_COUNT='{EXTRUDER_COUNT}' MATERIAL='{MATERIAL}' NOZZLE_SIZE='{NOZZLE_SIZE}'"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|RESET_PRINTER_STATE"
    RESPOND TYPE=command MSG="action:prompt_end"
  {% elif STEP == 6 %}
    {% set nozzle_key = MATERIAL if TOOLHEAD_TYPE in ["LASER", "SPINDLE", "DRAG_KNIFE"] else (MATERIAL ~ "_" ~ (NOZZLE_SIZE|string|replace(".", "_")) ~ (("_T0") if EXTRUDER_COUNT|int == 2 else "")) %}
    {% set existing_materials = toolheads[TOOLHEAD_NAME].materials %}
    {% set materials = {} %}
    {% if TOOLHEAD_TYPE == "DEPOSITION" %}
      {% set materials = {nozzle_key: {
        "extruder_temp": EXTRUDER_TEMP|int|default(existing_materials[nozzle_key].extruder_temp|default(200)),
        "bed_temp": BED_TEMP|int|default(existing_materials[nozzle_key].bed_temp|default(60)),
        "z_offset": 0.1 if NOZZLE_SIZE|float <= 0.4 else 0.2,
        "accel": existing_materials[nozzle_key].accel|default(2000.0),
        "extruder_count": EXTRUDER_COUNT|int,
        "nozzle_size": NOZZLE_SIZE|float,
        "square_corner_velocity": existing_materials[nozzle_key].square_corner_velocity|default(5.0),
        "fan_speed": existing_materials[nozzle_key].fan_speed|default(0.5),
        "load_length": existing_materials[nozzle_key].load_length|default(10.0),
        "load_speed": existing_materials[nozzle_key].load_speed|default(50),
        "load_wait": existing_materials[nozzle_key].load_wait|default(1000),
        "purge_length": existing_materials[nozzle_key].purge_length|default(12.0),
        "purge_wait": existing_materials[nozzle_key].purge_wait|default(2000),
        "stepper_x_current": existing_materials[nozzle_key].stepper_x_current|default(0.8),
        "stepper_y_current": existing_materials[nozzle_key].stepper_y_current|default(0.8),
        "stepper_z_current": existing_materials[nozzle_key].stepper_z_current|default(1.0),
        "extruder_current": existing_materials[nozzle_key].extruder_current|default(0.6)
      }} %}
      {% if EXTRUDER_COUNT|int == 2 %}
        {% set materials = materials|merge({(nozzle_key ~ "_T1"): {
          "extruder_temp": EXTRUDER_TEMP|int|default(existing_materials[(nozzle_key ~ "_T1")].extruder_temp|default(200)),
          "bed_temp": BED_TEMP|int|default(existing_materials[(nozzle_key ~ "_T1")].bed_temp|default(60)),
          "z_offset": 0.1 if NOZZLE_SIZE|float <= 0.4 else 0.2,
          "accel": existing_materials[(nozzle_key ~ "_T1")].accel|default(2000.0),
          "extruder_count": EXTRUDER_COUNT|int,
          "nozzle_size": NOZZLE_SIZE|float,
          "square_corner_velocity": existing_materials[(nozzle_key ~ "_T1")].square_corner_velocity|default(5.0),
          "fan_speed": existing_materials[(nozzle_key ~ "_T1")].fan_speed|default(0.5),
          "load_length": existing_materials[(nozzle_key ~ "_T1")].load_length|default(10.0),
          "load_speed": existing_materials[(nozzle_key ~ "_T1")].load_speed|default(50),
          "load_wait": existing_materials[(nozzle_key ~ "_T1")].load_wait|default(1000),
          "purge_length": existing_materials[(nozzle_key ~ "_T1")].purge_length|default(12.0),
          "purge_wait": existing_materials[(nozzle_key ~ "_T1")].purge_wait|default(2000),
          "stepper_x_current": existing_materials[(nozzle_key ~ "_T1")].stepper_x_current|default(0.8),
          "stepper_y_current": existing_materials[(nozzle_key ~ "_T1")].stepper_y_current|default(0.8),
          "stepper_z_current": existing_materials[(nozzle_key ~ "_T1")].stepper_z_current|default(1.0),
          "extruder_current": existing_materials[(nozzle_key ~ "_T1")].extruder_current|default(0.6)
        }}) %}
      {% endif %}
    {% elif TOOLHEAD_TYPE == "LASER" %}
      {% set materials = {nozzle_key: {
        "laser_power": LASER_POWER|float|default(existing_materials[nozzle_key].laser_power|default(0.8)),
        "bed_temp": 0,
        "z_offset": existing_materials[nozzle_key].z_offset|default(0.5),
        "accel": existing_materials[nozzle_key].accel|default(1000.0),
        "square_corner_velocity": existing_materials[nozzle_key].square_corner_velocity|default(5.0),
        "feed_rate": existing_materials[nozzle_key].feed_rate|default(600),
        "stepper_x_current": existing_materials[nozzle_key].stepper_x_current|default(0.7),
        "stepper_y_current": existing_materials[nozzle_key].stepper_y_current|default(0.7),
        "stepper_z_current": existing_materials[nozzle_key].stepper_z_current|default(0.8)
      }} %}
    {% elif TOOLHEAD_TYPE == "SPINDLE" %}
      {% set materials = {nozzle_key: {
        "spindle_speed": SPINDLE_SPEED|int|default(existing_materials[nozzle_key].spindle_speed|default(12000)),
        "bed_temp": 0,
        "z_offset": existing_materials[nozzle_key].z_offset|default(0.3),
        "accel": existing_materials[nozzle_key].accel|default(800.0),
        "square_corner_velocity": existing_materials[nozzle_key].square_corner_velocity|default(5.0),
        "feed_rate": existing_materials[nozzle_key].feed_rate|default(1000),
        "stepper_x_current": existing_materials[nozzle_key].stepper_x_current|default(1.2),
        "stepper_y_current": existing_materials[nozzle_key].stepper_y_current|default(1.2),
        "stepper_z_current": existing_materials[nozzle_key].stepper_z_current|default(1.2)
      }} %}
    {% elif TOOLHEAD_TYPE == "DRAG_KNIFE" %}
      {% set materials = {nozzle_key: {
        "pressure": PRESSURE|int|default(existing_materials[nozzle_key].pressure|default(150)),
        "bed_temp": 0,
        "z_offset": existing_materials[nozzle_key].z_offset|default(0.1),
        "accel": existing_materials[nozzle_key].accel|default(1200.0),
        "square_corner_velocity": existing_materials[nozzle_key].square_corner_velocity|default(5.0),
        "feed_rate": existing_materials[nozzle_key].feed_rate|default(1000),
        "stepper_x_current": existing_materials[nozzle_key].stepper_x_current|default(0.6),
        "stepper_y_current": existing_materials[nozzle_key].stepper_y_current|default(0.6),
        "stepper_z_current": existing_materials[nozzle_key].stepper_z_current|default(0.8)
      }} %}
    {% endif %}
    {% set toolhead_data = {"type": TOOLHEAD_TYPE, "extruder_count": EXTRUDER_COUNT|int|default(toolheads[TOOLHEAD_NAME].extruder_count|default(0)), "materials": materials}|tojson %}
    RUN_SHELL_COMMAND CMD=update_toolheads PARAMS="/home/pi/printer_data/config/variables.cfg edit '{TOOLHEAD_NAME}' '{toolhead_data}'"
    M117 Toolhead {TOOLHEAD_NAME} updated
    RESPOND TYPE=command MSG="action:notify Toolhead {TOOLHEAD_NAME} updated"
    LEDFLASH LED_PIN={led_pin}
    RESTART

[gcode_macro DELETE_TOOL_RESPONSE]
description: Handles response for deleting a toolhead
gcode:
  {% set TOOLHEAD_NAME = params.TOOLHEAD_NAME|default("") %}
  {% set toolheads = printer["gcode_macro VARIABLES"].toolheads %}
  {% set led_pin = printer.save_variables.variables.get("led_pin", "Umbilical_LED") %}
  
  {% if TOOLHEAD_NAME == "" or TOOLHEAD_NAME not in toolheads %}
    RESPOND TYPE=error MSG="Invalid or missing toolhead: {TOOLHEAD_NAME}"
    { action_raise_error("Toolhead not found") }
  {% endif %}
  
  RUN_SHELL_COMMAND CMD=update_toolheads PARAMS="/home/pi/printer_data/config/variables.cfg delete '{TOOLHEAD_NAME}'"
  M117 Toolhead {TOOLHEAD_NAME} deleted
  RESPOND TYPE=command MSG="action:notify Toolhead {TOOLHEAD_NAME} deleted"
  LEDFLASH LED_PIN={led_pin}
  RESTART




[tool T0]  # BlockOne
tool_number: 0
extruder: extruder
#fan: fan
#offset: 0,0,0
pickup_gcode:
  G28
  G1 X550 Y400 Z5 F6000
dropoff_gcode:
  G1 X550 Y400 Z50 F6000

#extruder: extruder
#detection_pin: et0:PB6
#fan: T0_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
# Position with the toolhead aligned with the dock
params_park_x: 0.0
params_park_y: -7.7
params_park_z: 349.5


[tool T1]  # SwitchFly filament 1
tool_number: 1
extruder: extruder
#fan: fan
#offset: 0,0,0
pickup_gcode:
  G28
  G1 X550 Y400 Z5 F6000
  {% if printer['gcode_macro SET_SERVO_ANGLE'] is defined %}
    SET_SERVO_ANGLE ANGLE=0
    G4 P1000
  {% else %}
    { action_raise_error("SET_SERVO_ANGLE not defined") }
  {% endif %}
dropoff_gcode:
  G1 X550 Y400 Z50 F6000

#extruder: extruder
#detection_pin: et0:PB6
#fan: T0_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
# Position with the toolhead aligned with the dock
params_park_x: 0.0
params_park_y: -7.7
params_park_z: 349.5

[tool T2]  # SwitchFly filament 2
tool_number: 2
extruder: extruder
#fan: fan
#offset: 0,0,0
pickup_gcode:
  G28
  G1 X550 Y400 Z5 F6000
  {% if printer['gcode_macro SET_SERVO_ANGLE'] is defined %}
    SET_SERVO_ANGLE ANGLE=180
    G4 P1000
  {% else %}
    { action_raise_error("SET_SERVO_ANGLE not defined") }
  {% endif %}
dropoff_gcode:
  G1 X550 Y400 Z50 F6000

[tool T3]  # Laser
tool_number: 3
#extruder: none
#fan: none
#offset: 0,0,2
pickup_gcode:
  G28
  G1 X550 Y400 Z5 F6000
  {% if printer['gcode_macro SET_SERVO_ANGLE'] is defined %}
    SET_SERVO_ANGLE ANGLE=0
    G4 P1000
  {% else %}
    { action_raise_error("SET_SERVO_ANGLE not defined") }
  {% endif %}
dropoff_gcode:
  G1 X550 Y400 Z50 F6000
  {% if printer['gcode_macro SET_SERVO_ANGLE'] is defined %}
    SET_SERVO_ANGLE ANGLE=180
  {% endif %}

[gcode_macro SWAP_TOOL]
description: Guided tool swap with MOSFET-controlled thermistor switching
variable_current_tool: 0
gcode:
  {% set new_tool = params.TOOL|int %}
  {% set park_x = printer["gcode_macro variables"].tool_swap_park_x|float %}
  {% set park_y = printer["gcode_macro variables"].tool_swap_park_y|float %}
  {% set park_z = printer["gcode_macro variables"].tool_swap_park_z|float %}

  # Step 1: Save state and turn off heaters/fan
  SAVE_GCODE_STATE NAME=tool_swap_state
  M104 S0
  M140 S0
  M106 S0
  RESPOND MSG="Heaters and fan turned off. Waiting for cooldown..."

  # Step 2: Wait for safe temperature
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=40
  TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=40

  # Step 3: Park toolhead
  G90
  G1 Z{park_z} F3000
  G1 X{park_x} Y{park_y} F6000
  RESPOND MSG="Toolhead parked at X{park_x} Y{park_y} Z{park_z}"

  # Step 4: Power down components for current tool
  {% if printer["gcode_macro SWAP_TOOL"].current_tool != 0 %}
    SET_PIN PIN=tool{printer["gcode_macro SWAP_TOOL"].current_tool}_stepper_enable VALUE=0
    SET_PIN PIN=tool{printer["gcode_macro SWAP_TOOL"].current_tool}_heater_pin VALUE=0
    SET_PIN PIN=tool{printer["gcode_macro SWAP_TOOL"].current_tool}_probe_pin VALUE=0
    RESPOND MSG="Current tool components powered down."
  {% endif %}

  # Step 5: Switch to dummy thermistor via MOSFET
  SET_PIN PIN=thermistor_switch VALUE=0  ; RPi GPIO18 off, MOSFET switches to dummy thermistor
  RESPOND MSG="Switched to dummy thermistor."

  # Step 6: Prompt to disconnect current tool
  RESPOND MSG="Disconnect tool {printer['gcode_macro SWAP_TOOL'].current_tool} now (including thermistor)."
  M0 S30 MSG="Disconnect tool {printer['gcode_macro SWAP_TOOL'].current_tool}. Click to continue or wait 30s."

  # Step 7: Prompt to connect new tool
  RESPOND MSG="Connect tool {new_tool} now (including thermistor)."
  M0 S30 MSG="Connect tool {new_tool}. Click to continue or wait 30s."

  # Step 8: Switch back to toolhead thermistor
  SET_PIN PIN=thermistor_switch VALUE=1  ; RPi GPIO18 on, MOSFET switches to toolhead thermistor
  RESPOND MSG="Switched to tool {new_tool} thermistor."

  # Step 9: Power up new tool components
  SET_PIN PIN=tool{new_tool}_stepper_enable VALUE=1
  SET_PIN PIN=tool{new_tool}_heater_pin VALUE=0
  SET_PIN PIN=tool{new_tool}_probe_pin VALUE=1
  RESPOND MSG="Tool {new_tool} components powered up."

  # Step 10: Verify thermistor connection
  RESPOND MSG="Verifying new tool thermistor..."
  {% if printer.extruder.temperature < -50 or printer.extruder.temperature > 350 %}
    { action_raise_error("Thermistor not connected properly for tool " ~ new_tipool) }
  {% else %}
    RESPOND MSG="Thermistor for tool {new_tool} reading {printer.extruder.temperature}°C. Connection verified."
  {% endif %}

  # Step 11: Update current tool
  SET_GCODE_VARIABLE MACRO=SWAP_TOOL VARIABLE=current_tool VALUE={new_tool}

  # Step 12: Calibration
  RESPOND MSG="Running calibration for tool {new_tool}..."
  G28
  RESPOND MSG="Tool swap complete. Tool {new_tool} is ready."

  # Step 13: Restore state
  RESTORE_GCODE_STATE NAME=tool_swap_state
